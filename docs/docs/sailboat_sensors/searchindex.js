Search.setIndex({"alltitles": {"Module contents": [[2, "module-sailboat_sensors"], [3, "module-sailboat_sensors.airmar"], [7, "module-sailboat_sensors.anemometer"]], "PACKAGE": [[11, null]], "Standard Documents": [[12, null]], "Submodules": [[3, "submodules"], [7, "submodules"]], "Subpackages": [[2, "subpackages"]], "sailboat_sensors": [[0, null], [1, null]], "sailboat_sensors package": [[2, null]], "sailboat_sensors.airmar package": [[3, null]], "sailboat_sensors.airmar.airmar_node module": [[4, null]], "sailboat_sensors.airmar.sail_airmar module": [[5, null]], "sailboat_sensors.airmar.sail_airmar_fake module": [[6, null]], "sailboat_sensors.anemometer package": [[7, null]], "sailboat_sensors.anemometer.anemometer_node module": [[8, null]], "sailboat_sensors.anemometer.sail_anemometer module": [[9, null]], "sailboat_sensors.anemometer.sail_anemometer_fake module": [[10, null]]}, "docnames": ["index", "modules", "sailboat_sensors", "sailboat_sensors.airmar", "sailboat_sensors.airmar.airmar_node", "sailboat_sensors.airmar.sail_airmar", "sailboat_sensors.airmar.sail_airmar_fake", "sailboat_sensors.anemometer", "sailboat_sensors.anemometer.anemometer_node", "sailboat_sensors.anemometer.sail_anemometer", "sailboat_sensors.anemometer.sail_anemometer_fake", "standard_docs/PACKAGE", "standards"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "modules.rst", "sailboat_sensors.rst", "sailboat_sensors.airmar.rst", "sailboat_sensors.airmar.airmar_node.rst", "sailboat_sensors.airmar.sail_airmar.rst", "sailboat_sensors.airmar.sail_airmar_fake.rst", "sailboat_sensors.anemometer.rst", "sailboat_sensors.anemometer.anemometer_node.rst", "sailboat_sensors.anemometer.sail_anemometer.rst", "sailboat_sensors.anemometer.sail_anemometer_fake.rst", "standard_docs/PACKAGE.rst", "standards.rst"], "indexentries": {"airmar (class in sailboat_sensors.airmar.airmar_node)": [[4, "sailboat_sensors.airmar.airmar_node.AirMar", false]], "anemometer (class in sailboat_sensors.anemometer.anemometer_node)": [[8, "sailboat_sensors.anemometer.anemometer_node.Anemometer", false]], "close() (sailboat_sensors.anemometer.sail_anemometer.sailanemometer method)": [[9, "sailboat_sensors.anemometer.sail_anemometer.SailAnemometer.close", false]], "close() (sailboat_sensors.anemometer.sail_anemometer_fake.fakesailanemometer method)": [[10, "sailboat_sensors.anemometer.sail_anemometer_fake.FakeSailAnemometer.close", false]], "destroy_node() (sailboat_sensors.anemometer.anemometer_node.anemometer method)": [[8, "sailboat_sensors.anemometer.anemometer_node.Anemometer.destroy_node", false]], "euler_to_quaternion() (sailboat_sensors.airmar.airmar_node.airmar method)": [[4, "sailboat_sensors.airmar.airmar_node.AirMar.euler_to_quaternion", false]], "fakeairmar (class in sailboat_sensors.airmar.sail_airmar_fake)": [[6, "sailboat_sensors.airmar.sail_airmar_fake.FakeAirMar", false]], "fakesailanemometer (class in sailboat_sensors.anemometer.sail_anemometer_fake)": [[10, "sailboat_sensors.anemometer.sail_anemometer_fake.FakeSailAnemometer", false]], "getheading() (sailboat_sensors.airmar.airmar_node.airmar method)": [[4, "sailboat_sensors.airmar.airmar_node.AirMar.getHeading", false]], "getlat() (sailboat_sensors.airmar.airmar_node.airmar method)": [[4, "sailboat_sensors.airmar.airmar_node.AirMar.getLat", false]], "getlong() (sailboat_sensors.airmar.airmar_node.airmar method)": [[4, "sailboat_sensors.airmar.airmar_node.AirMar.getLong", false]], "gps_callback() (sailboat_sensors.airmar.airmar_node.airmar method)": [[4, "sailboat_sensors.airmar.airmar_node.AirMar.gps_callback", false]], "main() (in module sailboat_sensors.airmar.airmar_node)": [[4, "sailboat_sensors.airmar.airmar_node.main", false]], "main() (in module sailboat_sensors.anemometer.anemometer_node)": [[8, "sailboat_sensors.anemometer.anemometer_node.main", false]], "module": [[2, "module-sailboat_sensors", false], [3, "module-sailboat_sensors.airmar", false], [4, "module-sailboat_sensors.airmar.airmar_node", false], [5, "module-sailboat_sensors.airmar.sail_airmar", false], [6, "module-sailboat_sensors.airmar.sail_airmar_fake", false], [7, "module-sailboat_sensors.anemometer", false], [8, "module-sailboat_sensors.anemometer.anemometer_node", false], [9, "module-sailboat_sensors.anemometer.sail_anemometer", false], [10, "module-sailboat_sensors.anemometer.sail_anemometer_fake", false]], "parseairmardata() (sailboat_sensors.airmar.sail_airmar.sailairmar method)": [[5, "sailboat_sensors.airmar.sail_airmar.SailAirMar.parseAirMarData", false]], "read_wind() (sailboat_sensors.anemometer.sail_anemometer.sailanemometer method)": [[9, "sailboat_sensors.anemometer.sail_anemometer.SailAnemometer.read_wind", false]], "read_wind() (sailboat_sensors.anemometer.sail_anemometer_fake.fakesailanemometer method)": [[10, "sailboat_sensors.anemometer.sail_anemometer_fake.FakeSailAnemometer.read_wind", false]], "readairmarheading() (sailboat_sensors.airmar.sail_airmar.sailairmar method)": [[5, "sailboat_sensors.airmar.sail_airmar.SailAirMar.readAirMarHeading", false]], "readairmarheading() (sailboat_sensors.airmar.sail_airmar_fake.fakeairmar method)": [[6, "sailboat_sensors.airmar.sail_airmar_fake.FakeAirMar.readAirMarHeading", false]], "readairmarlatitude() (sailboat_sensors.airmar.sail_airmar.sailairmar method)": [[5, "sailboat_sensors.airmar.sail_airmar.SailAirMar.readAirMarLatitude", false]], "readairmarlatitude() (sailboat_sensors.airmar.sail_airmar_fake.fakeairmar method)": [[6, "sailboat_sensors.airmar.sail_airmar_fake.FakeAirMar.readAirMarLatitude", false]], "readairmarlongitude() (sailboat_sensors.airmar.sail_airmar.sailairmar method)": [[5, "sailboat_sensors.airmar.sail_airmar.SailAirMar.readAirMarLongitude", false]], "readairmarlongitude() (sailboat_sensors.airmar.sail_airmar_fake.fakeairmar method)": [[6, "sailboat_sensors.airmar.sail_airmar_fake.FakeAirMar.readAirMarLongitude", false]], "readairmarrot() (sailboat_sensors.airmar.sail_airmar.sailairmar method)": [[5, "sailboat_sensors.airmar.sail_airmar.SailAirMar.readAirMarROT", false]], "readairmarrot() (sailboat_sensors.airmar.sail_airmar_fake.fakeairmar method)": [[6, "sailboat_sensors.airmar.sail_airmar_fake.FakeAirMar.readAirMarROT", false]], "sailairmar (class in sailboat_sensors.airmar.sail_airmar)": [[5, "sailboat_sensors.airmar.sail_airmar.SailAirMar", false]], "sailanemometer (class in sailboat_sensors.anemometer.sail_anemometer)": [[9, "sailboat_sensors.anemometer.sail_anemometer.SailAnemometer", false]], "sailboat_sensors": [[2, "module-sailboat_sensors", false]], "sailboat_sensors.airmar": [[3, "module-sailboat_sensors.airmar", false]], "sailboat_sensors.airmar.airmar_node": [[4, "module-sailboat_sensors.airmar.airmar_node", false]], "sailboat_sensors.airmar.sail_airmar": [[5, "module-sailboat_sensors.airmar.sail_airmar", false]], "sailboat_sensors.airmar.sail_airmar_fake": [[6, "module-sailboat_sensors.airmar.sail_airmar_fake", false]], "sailboat_sensors.anemometer": [[7, "module-sailboat_sensors.anemometer", false]], "sailboat_sensors.anemometer.anemometer_node": [[8, "module-sailboat_sensors.anemometer.anemometer_node", false]], "sailboat_sensors.anemometer.sail_anemometer": [[9, "module-sailboat_sensors.anemometer.sail_anemometer", false]], "sailboat_sensors.anemometer.sail_anemometer_fake": [[10, "module-sailboat_sensors.anemometer.sail_anemometer_fake", false]], "serialdatareader() (sailboat_sensors.airmar.sail_airmar.sailairmar method)": [[5, "sailboat_sensors.airmar.sail_airmar.SailAirMar.serialDataReader", false]], "simulate() (sailboat_sensors.airmar.sail_airmar_fake.fakeairmar method)": [[6, "sailboat_sensors.airmar.sail_airmar_fake.FakeAirMar.simulate", false]], "timer_callback() (sailboat_sensors.anemometer.anemometer_node.anemometer method)": [[8, "sailboat_sensors.anemometer.anemometer_node.Anemometer.timer_callback", false]], "update_rate_of_turn() (sailboat_sensors.airmar.sail_airmar_fake.fakeairmar method)": [[6, "sailboat_sensors.airmar.sail_airmar_fake.FakeAirMar.update_rate_of_turn", false]]}, "objects": {"": [[2, 0, 0, "-", "sailboat_sensors"]], "sailboat_sensors": [[3, 0, 0, "-", "airmar"], [7, 0, 0, "-", "anemometer"]], "sailboat_sensors.airmar": [[4, 0, 0, "-", "airmar_node"], [5, 0, 0, "-", "sail_airmar"], [6, 0, 0, "-", "sail_airmar_fake"]], "sailboat_sensors.airmar.airmar_node": [[4, 1, 1, "", "AirMar"], [4, 3, 1, "", "main"]], "sailboat_sensors.airmar.airmar_node.AirMar": [[4, 2, 1, "", "euler_to_quaternion"], [4, 2, 1, "", "getHeading"], [4, 2, 1, "", "getLat"], [4, 2, 1, "", "getLong"], [4, 2, 1, "", "gps_callback"]], "sailboat_sensors.airmar.sail_airmar": [[5, 1, 1, "", "SailAirMar"]], "sailboat_sensors.airmar.sail_airmar.SailAirMar": [[5, 2, 1, "", "parseAirMarData"], [5, 2, 1, "", "readAirMarHeading"], [5, 2, 1, "", "readAirMarLatitude"], [5, 2, 1, "", "readAirMarLongitude"], [5, 2, 1, "", "readAirMarROT"], [5, 2, 1, "", "serialDataReader"]], "sailboat_sensors.airmar.sail_airmar_fake": [[6, 1, 1, "", "FakeAirMar"]], "sailboat_sensors.airmar.sail_airmar_fake.FakeAirMar": [[6, 2, 1, "", "readAirMarHeading"], [6, 2, 1, "", "readAirMarLatitude"], [6, 2, 1, "", "readAirMarLongitude"], [6, 2, 1, "", "readAirMarROT"], [6, 2, 1, "", "simulate"], [6, 2, 1, "", "update_rate_of_turn"]], "sailboat_sensors.anemometer": [[8, 0, 0, "-", "anemometer_node"], [9, 0, 0, "-", "sail_anemometer"], [10, 0, 0, "-", "sail_anemometer_fake"]], "sailboat_sensors.anemometer.anemometer_node": [[8, 1, 1, "", "Anemometer"], [8, 3, 1, "", "main"]], "sailboat_sensors.anemometer.anemometer_node.Anemometer": [[8, 2, 1, "", "destroy_node"], [8, 2, 1, "", "timer_callback"]], "sailboat_sensors.anemometer.sail_anemometer": [[9, 1, 1, "", "SailAnemometer"]], "sailboat_sensors.anemometer.sail_anemometer.SailAnemometer": [[9, 2, 1, "", "close"], [9, 2, 1, "", "read_wind"]], "sailboat_sensors.anemometer.sail_anemometer_fake": [[10, 1, 1, "", "FakeSailAnemometer"]], "sailboat_sensors.anemometer.sail_anemometer_fake.FakeSailAnemometer": [[10, 2, 1, "", "close"], [10, 2, 1, "", "read_wind"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "terms": {"0": [5, 10, 11], "1": 11, "180": 5, "2": 11, "2001": 11, "270": 5, "3": 11, "360": 10, "60": 6, "90": 5, "9600": 9, "A": 6, "It": [8, 9, 10], "airmar": [0, 1, 2, 11], "airmar_nod": [2, 3], "alber": 11, "albert": 11, "also": 5, "ament_copyright": 11, "ament_flake8": 11, "ament_pep257": 11, "ament_python": 11, "an": [9, 10], "anemomet": [0, 1, 2, 11], "anemometer_nod": [2, 7], "angl": 10, "apach": 11, "api": 0, "ar": 5, "arg": [4, 8], "base": [4, 5, 6, 8, 9, 10], "baudrat": 9, "befor": 8, "behavior": [6, 10], "build_typ": 11, "callback": 8, "class": [4, 5, 6, 8, 9, 10], "close": [7, 8, 9, 10], "com": 11, "commun": [5, 8, 9], "compon": 5, "connect": [5, 8, 9, 10], "content": 1, "data": [5, 6, 8, 9], "degre": [5, 10], "descript": 11, "destroy_nod": [7, 8], "dictionari": 5, "direct": [9, 10], "directli": 9, "document": 0, "down": 8, "download": 11, "durat": 6, "east": 5, "email": 11, "euler_to_quaternion": [3, 4], "export": 11, "fake": [6, 10], "fakeairmar": [2, 3, 6], "fakesailanemomet": [2, 7, 10], "format": 11, "from": [5, 8, 9, 10], "function": [5, 8], "gener": [6, 10], "gethead": [3, 4], "getlat": [3, 4], "getlong": [3, 4], "given": 6, "gmail": 11, "gp": 6, "gps_callback": [3, 4], "head": 5, "href": 11, "http": 11, "i": [5, 8, 9], "implement": 5, "imu": 6, "integ": [9, 10], "interfac": 9, "its": 5, "latitud": 5, "licens": 11, "line": 5, "longitud": 5, "main": [2, 3, 4, 7, 8], "maintain": 11, "method": 8, "model": 11, "modul": 1, "name": 11, "node": [4, 8], "none": [4, 8], "north": 5, "object": [5, 6, 9, 10], "omit": 5, "onboard": [0, 11], "op": 10, "org": 11, "overrid": 8, "packag": [0, 1, 12], "package_format3": 11, "pars": 5, "parseairmardata": [3, 5], "per": 5, "pitch": 4, "port": [5, 9], "proper": 5, "protocol": 5, "provid": 6, "publish": 8, "purpos": [6, 10], "pytest": 11, "python": 0, "python3": 11, "random": [6, 10], "rate": 5, "raw": 5, "read": [5, 6, 8, 9, 10], "read_wind": [7, 9, 10], "readairmarhead": [3, 5, 6], "readairmarlatitud": [3, 5, 6], "readairmarlongitud": [3, 5, 6], "readairmarrot": [3, 5, 6], "real": [6, 10], "respons": 9, "retrun": 5, "return": [5, 9, 10], "ro": 11, "roll": 4, "ros2": 8, "sail_airmar": [2, 3], "sail_airmar_fak": [2, 3], "sail_anemomet": [2, 7], "sail_anemometer_fak": [2, 7], "sailairmar": [2, 3, 5, 6], "sailanemomet": [2, 7, 8, 9], "sailboat": [0, 11], "sailboat_sensor": 11, "schema": 11, "schematypen": 11, "second": [5, 6], "sensor": [0, 6, 8, 9, 10, 11], "serial": [5, 8, 9], "serialdataread": [3, 5], "shut": 8, "simul": [3, 6, 10], "some": 5, "south": 5, "standard": 0, "store": 5, "submodul": [1, 2], "subpackag": 1, "sun": 11, "test": [6, 10], "test_depend": 11, "thi": [5, 6, 8, 9, 10], "timer": 8, "timer_callback": [7, 8], "topic": 8, "turn": 5, "updat": 5, "update_rate_of_turn": [3, 6], "us": [5, 8], "valu": 10, "version": 11, "w3": 11, "west": 5, "wind": [8, 9, 10], "www": 11, "xml": 11, "xmlschema": 11, "xsd": 11, "yang": 11, "yaw": 4}, "titles": ["sailboat_sensors", "sailboat_sensors", "sailboat_sensors package", "sailboat_sensors.airmar package", "sailboat_sensors.airmar.airmar_node module", "sailboat_sensors.airmar.sail_airmar module", "sailboat_sensors.airmar.sail_airmar_fake module", "sailboat_sensors.anemometer package", "sailboat_sensors.anemometer.anemometer_node module", "sailboat_sensors.anemometer.sail_anemometer module", "sailboat_sensors.anemometer.sail_anemometer_fake module", "PACKAGE", "Standard Documents"], "titleterms": {"airmar": [3, 4, 5, 6], "airmar_nod": 4, "anemomet": [7, 8, 9, 10], "anemometer_nod": 8, "content": [2, 3, 7], "document": 12, "modul": [2, 3, 4, 5, 6, 7, 8, 9, 10], "packag": [2, 3, 7, 11], "sail_airmar": 5, "sail_airmar_fak": 6, "sail_anemomet": 9, "sail_anemometer_fak": 10, "sailboat_sensor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "standard": 12, "submodul": [3, 7], "subpackag": 2}})