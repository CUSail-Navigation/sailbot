import numpy as np
import rclpy
from rclpy.node import Node
from sailboat_interface.msg import SailTail

class Servo(Node):
    def __init__(self):
        super().__init__('servo')

        # Declare parameters
        self.declare_parameter('servo_port', '/dev/ttyUSB0')  # Default value added
        self.declare_parameter('simulated', False)  # Parameter to control simulation

        self.servo_port = self.get_parameter('servo_port').value
        self.simulated = self.get_parameter('simulated').value

        # Subscription to SailTail messages
        self.subscription = self.create_subscription(
            SailTail,
            'servo',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning

        # Initialize serial connection if not in simulation mode
        if not self.simulated:
            try:
                self.servo_serial = serial.Serial(self.servo_port, baudrate=9600)
                self.get_logger().info(f'Serial connection established on {self.servo_port}.')
            except serial.SerialException as e:
                self.get_logger().error(f"Could not open serial port {self.servo_port}: {e}")
                self.simulated = True  # Fallback to simulation mode

        if self.simulated:
            self.get_logger().info('Simulation mode enabled. Serial communication is disabled.')

    def listener_callback(self, msg):
        # If not in simulation mode, send data to the serial port
        if not self.simulated:
            try:
                command = f"{msg.sail} {msg.tail}\n".encode('utf-8')
                self.servo_serial.write(command)
                self.get_logger().info(f'Sent to servo: {command}')
            except Exception as e:
                self.get_logger().error(f"Failed to write to serial port: {e}")
        else:
            # Simulate the behavior
            self.get_logger().info(f'[SIMULATION] Sail: {msg.sail}, Tail: {msg.tail}')

    def destroy_node(self):
        # Close the serial connection if not in simulation mode
        if not self.simulated and hasattr(self, 'servo_serial'):
            self.servo_serial.close()
            self.get_logger().info('Serial connection closed.')
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)

    servo = Servo()

    try:
        rclpy.spin(servo)
    except KeyboardInterrupt:
        pass

    # Destroy the node explicitly
    servo.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
